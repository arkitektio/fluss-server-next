# Generated by Django 5.2 on 2025-05-06 12:43

import django.db.models.deletion
import django_choices_field.fields
import reaktion.enums
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('restrict', models.JSONField(default=list, help_text='Restrict access to specific nodes for this diagram')),
                ('version', models.CharField(default='1.0alpha', max_length=100)),
                ('title', models.CharField(max_length=10000, null=True)),
                ('nodes', models.JSONField(blank=True, default=list, null=True)),
                ('edges', models.JSONField(blank=True, default=list, null=True)),
                ('graph', models.JSONField(blank=True, null=True)),
                ('hash', models.CharField(default=uuid.uuid4, max_length=4000)),
                ('description', models.CharField(blank=True, default='Add a Desssscription', max_length=50000, null=True)),
                ('brittle', models.BooleanField(default=False, help_text='Is this a brittle flow? aka. should the flow fail on any exception?')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the position', related_name='pinned_flows', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReactiveTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('implementation', django_choices_field.fields.TextChoicesField(choices=[('ZIP', 'ZIP (Zip the data)'), ('COMBINELATEST', 'COMBINELATEST (Combine values with latest value from each stream)'), ('WITHLATEST', 'WITHLATEST (Combine a leading value with the latest value)'), ('BUFFER_COMPLETE', 'BUFFER_COMPLETE (Buffer values until complete is retrieved)'), ('BUFFER_UNTIL', 'BUFFER_UNTIL (Buffer values until signal is send)'), ('BUFFER_COUNT', 'BUFFER_COUNT (Butffer values until the count is reacht)'), ('DELAY', 'DELAY (Delay the data)'), ('DELAY_UNTIL', 'DELAY_UNTIL (Delay the data until signal is send)'), ('CHUNK', 'CHUNK (Chunk the data)'), ('SPLIT', 'SPLIT (Split the data)'), ('OMIT', 'OMIT (Omit the data)'), ('ENSURE', 'ENSURE (Ensure the data (discards None in the stream))'), ('ADD', 'ADD (Add a number to the data)'), ('SUBTRACT', 'SUBTRACT (Subtract a number from the data)'), ('MULTIPLY', 'MULTIPLY (Multiply the data with a number)'), ('DIVIDE', 'DIVIDE (Divide the data with a number)'), ('MODULO', 'MODULO (Modulo the data with a number)'), ('POWER', 'POWER (Power the data with a number)'), ('PREFIX', 'PREFIX (Prefix the data with a string)'), ('SUFFIX', 'SUFFIX (Suffix the data with a string)'), ('FILTER', 'FILTER (Filter the data of a union)'), ('REORDER', 'REORDER (Reorder the data)'), ('GATE', 'GATE (Gate the data, first value is gated, second is gate)'), ('TO_LIST', 'TO_LIST (Convert to list)'), ('FOREACH', 'FOREACH (Foreach element in list)'), ('IF', 'IF (If condition is met)'), ('AND', 'AND (AND condition)'), ('ALL', 'ALL (establish if all values are Trueish)')], choices_enum=reaktion.enums.ReactiveImplementationChoices, default='ZIP', help_text='Check async Programming Textbook', max_length=1000)),
                ('ins', models.JSONField(blank=True, default=list, null=True)),
                ('outs', models.JSONField(blank=True, default=list, null=True)),
                ('voids', models.JSONField(blank=True, default=list, null=True)),
                ('constants', models.JSONField(blank=True, default=list, null=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('title', 'description'), name='Only one Reactive Template with this title and description')],
            },
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('assignation', models.CharField(blank=True, max_length=1000, null=True)),
                ('status', models.CharField(default='RUNNING', max_length=100)),
                ('snapshot_interval', models.IntegerField(blank=True, null=True)),
                ('flow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='reaktion.flow')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the position', related_name='pinned_runs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Snapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('t', models.IntegerField()),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('run', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='reaktion.run')),
            ],
        ),
        migrations.CreateModel(
            name='RunEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('reference', models.CharField(blank=True, max_length=1000, null=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('NEXT', 'NEXT (Value represent Item)'), ('ERROR', 'Error (Value represent Exception)'), ('COMPLETE', 'COMPLETE (Value is none)'), ('UNKNOWN', 'UNKNOWN (Should never be used)')], choices_enum=reaktion.enums.RunEventKindChoices, default='NEXT', help_text='The type of event', max_length=1000)),
                ('t', models.IntegerField()),
                ('caused_by', models.JSONField(blank=True, default=list)),
                ('source', models.CharField(max_length=1000)),
                ('handle', models.CharField(blank=True, max_length=1000)),
                ('value', models.JSONField(blank=True, null=True)),
                ('exception', models.CharField(blank=True, max_length=2000, null=True)),
                ('run', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='reaktion.run')),
                ('snapshot', models.ManyToManyField(related_name='events', to='reaktion.snapshot')),
            ],
        ),
        migrations.CreateModel(
            name='Trace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provision', models.JSONField(blank=True, max_length=1000, null=True)),
                ('snapshot_interval', models.IntegerField(blank=True, null=True)),
                ('flow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='traces', to='reaktion.flow')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the position', related_name='pinned_conditions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TraceSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('trace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='reaktion.trace')),
            ],
        ),
        migrations.CreateModel(
            name='TraceEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('source', models.CharField(max_length=1000)),
                ('value', models.CharField(blank=True, max_length=1000)),
                ('state', models.CharField(blank=True, max_length=1000)),
                ('trace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='reaktion.trace')),
                ('snapshot', models.ManyToManyField(related_name='events', to='reaktion.tracesnapshot')),
            ],
        ),
        migrations.CreateModel(
            name='Workspace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('restrict', models.JSONField(default=list, help_text='Restrict access to specific nodes for this diagram okay?')),
                ('title', models.CharField(max_length=10000, null=True)),
                ('description', models.CharField(max_length=10000, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that have pinned the workspace', related_name='pinned_workspaces', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='flow',
            name='workspace',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flows', to='reaktion.workspace'),
        ),
        migrations.AddConstraint(
            model_name='flow',
            constraint=models.UniqueConstraint(fields=('workspace', 'hash'), name='Equal Reservation on this App by this Waiter is already in place'),
        ),
    ]
